import * as changeCase from "change-case";
import * as inquirer from "inquirer";
import * as fs from "fs";
import {PermissionManager} from "./scripts/PermissionManager";
import {GenerateManager} from "./scripts/GenerateManager";
import {MANIFAST_PATH} from "./scripts/constants/ManifestPath";
import {DependencyManager} from "./scripts/DependencyManager";

const chalk = require('chalk'),
    figlet = require('figlet'),
    commander = require('commander');

commander.arguments('<name>')
    .version('0.0.1')
    .option('-g, --generate [name]', 'component (e.g activity, fragment etc..)')
    .option('-p, --permission <permission>', 'add uses-permission to manifest file(e.g INTERNET)')
    .option('-d, --dependency <dependency>', 'add dependency to build.gradle and sync gradle')
    .action((name: string) => {
        if (commander.generate) {
            const generateManager: GenerateManager = new GenerateManager();
            console.log(chalk.yellow(`${changeCase.pascalCase(commander.generate)} will generated by Android CLI`));
            generateManager.getApplicationPackage(packageName => {
                generateManager.getPackages(packageName, packageList => {
                    let questions = [{
                        type: 'list',
                        name: 'package',
                        message: "Choose your target package path",
                        choices: packageList,
                    }];
                    inquirer.prompt(questions).then(answers => {
                        generateManager.generateRenderedOutFile(commander.generate, name, answers.package);
                    });
                })
            })
        }
    }).parse(process.argv);

presentInitialMessage();

if (commander.permission) {
    const permissionManager: PermissionManager = new PermissionManager();
    permissionManager.addPermissionToManifest(commander.permission, xml => {
        try {
            fs.writeFileSync(MANIFAST_PATH, xml);
            console.log(chalk.green(`Successful adding permission`));
        } catch (err) {
            console.log(chalk.red(`Failed to adding permission`));
            console.log(chalk.red(err))
        }
    });
} else if (commander.dependency) {
    const dependencyManager: DependencyManager = new DependencyManager();
    dependencyManager.addDependency(commander.dependency, (code, stdout, stderr) => {
        if (stderr) {
            console.log(chalk.red(`Complete with some error. Please check gradle sync result.`));
        } else {
            console.log(chalk.green(`Successful adding dependency with gradle sync`));
        }
    });
}

/**
 * @desc Just present initial message
 */
function presentInitialMessage() {
    console.log(chalk.cyan("WELCOME TO ANDROID CLI!"));
}
